package com.example.pytorchapp;

import android.content.Context;
import android.graphics.Bitmap;

import org.pytorch.IValue;
import org.pytorch.Module;
import org.pytorch.Tensor;
import org.pytorch.torchvision.TensorImageUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/*
First, add these dependencies to build.gradle (module: app):
     implementation 'org.pytorch:pytorch_android:1.6.0'
     implementation 'org.pytorch:pytorch_android_torchvision:1.4.0'
Add the model files into the assets folder (/app/src/main/assets)

Store 'private ModelClass myClass;' somewhere in the app
When starting the app, initialize the class with: myClass = new ModelClass(this); (this line may take a few seconds to run)
To run, get a BitMap for the image and call myClass.runModel(bitmap, <modelName>, <numPredictions>)
    Possible values for modelName: "BiosphereModel", "ButterflyModel", "NABirdsModel", "MetaModel"
*/

public class ModelClass {

    private static int[] biosphereArray = new int[]{148572, 648985, 54951, 49761, 148856, 133681, 123266, 623376, 51536, 125071, 49972, 68275, 141752, 210311, 333921, 245985, 312835, 148552, 257973, 148567, 148564, 143076, 341833, 153970, 153470, 126296, 136464, 356393, 340016, 349768, 325498, 354326, 605661, 319069, 118786, 148852, 48662, 130451, 258019, 311421, 148690, 50073, 487452, 83834, 50075, 339912, 179796, 312615, 51581, 120512, 348234, 357835, 319969, 339499, 148884, 85449, 498083, 148742, 83227, 293991, 146572, 780549, 49766, 127157, 207905, 81744, 123513, 639245, 148696, 148676, 147200, 340996, 258079, 84115, 258084, 320729, 51578, 625995, 625998, 133929, 48505, 67980, 415292, 148675, 342572, 510348, 345775, 196878, 68237, 132190, 148563, 148623, 148693, 258279, 82287, 146661, 349189, 423871, 205140, 319069, 681136, 50072, 68468, 68469, 204773, 509480, 354338, 133442, 147959, 203122, 505159, 341884, 326307, 85026, 509626, 58525, 148356, 258177, 258178, 133450, 145621, 460862, 148463, 133416, 48550, 148887, 142947, 357130, 204076, 204765, 126316, 50336, 258258, 294022, 148787, 49133, 196812};
    private static int[] birdsArray = new int[]{7024, 7170, 850859, 5196, 5212, 7107, 558439, 485176, 6930, 558433, 558434, 558438, 6933, 6937, 7057, 7056, 7044, 7047, 7054, 7111, 7036, 6993, 6990, 7109, 7004, 6996, 1409, 1406, 981, 4626, 4209, 4224, 4205, 3802, 4265, 4270, 4937, 4948, 4981, 4999, 3751, 5305, 558446, 5097, 5112, 5206, 5227, 5200, 5074, 4665, 4647, 519, 144479, 4892, 72458, 3857, 144497, 6141, 6432, 6433, 6317, 6316, 199914, 6369, 6363, 6359, 18204, 18236, 4415, 4494, 144514, 4353, 4364, 4345, 4385, 204533, 4399, 4368, 144502, 4356, 144537, 4512, 4450, 4457, 144539, 4496, 7019, 7087, 7089, 6921, 6915, 6917, 6924, 6948, 1280, 890, 906, 4246, 4235, 4234, 4742, 4277, 4308, 4283, 5063, 4334, 4328, 4956, 144455, 4940, 4938, 5017, 5020, 3756, 3759, 62529, 4765, 4756, 116999, 5301, 5277, 5416, 5355, 5196, 5212, 4714, 4672, 4644, 473, 508048, 4817, 4793, 4840, 4838, 4836, 4885, 3875, 3892, 144491, 3893, 3901, 3906, 3954, 3938, 3941, 339592, 3862, 3855, 3864, 3869, 144496, 3936, 3017, 3108, 2969, 3460, 3454, 3544, 3545, 1965, 1960, 1986, 20445, 19743, 19765, 20044, 144594, 19812, 19975, 19893, 20356, 19577, 6571, 6557, 6553, 2548, 18209, 18161, 18167, 18205, 18463, 18467, 18464, 792986, 792987, 792988, 792990, 17855, 4494, 144514, 4364, 4345, 4385, 204533, 4368, 6893, 7107, 6930, 558438, 7044, 7054, 6993, 6990, 7109, 7004, 6996, 1409, 4627, 4621, 4626, 4209, 4224, 4205, 4265, 4937, 4981, 4999, 3751, 5305, 558446, 5097, 5112, 5206, 5200, 5074, 4665, 4647, 4892, 72458, 3849, 3857, 144497, 6432, 6433, 6317, 199914, 6369, 6363, 6359, 18204, 18236, 850859, 5212, 10094, 145245, 14850, 9156, 9915, 9325, 11867, 12727, 9721, 10247, 145235, 145239, 145240, 199916, 9184, 9182, 9176, 9185, 10094, 9135, 9921, 9919, 9083, 10271, 10274, 73155, 10234, 10227, 10224, 10487, 9744, 10470, 10325, 10373, 9319, 9357, 9346, 9771, 199841, 199839, 199840, 10411, 10423, 145308, 145310, 9800, 13858, 16447, 145245, 8001, 8010, 7294, 11935, 11931, 11970, 11858, 11855, 11901, 144814, 144815, 144816, 144820, 13630, 13633, 13632, 13631, 7603, 7266, 14823, 14801, 14816, 14825, 7458, 7470, 7464, 7513, 7576, 7562, 144883, 7601, 7493, 7498, 7643, 117100, 117095, 15256, 12942, 12937, 12936, 12951, 12901, 12878, 12890, 13270, 145088, 14995, 14886, 14898, 14912, 14906, 14850, 13732, 7429, 7428, 62550, 73148, 73149, 73553, 10286, 10729, 979756, 979757, 979753, 145223, 145224, 145229, 145231, 145233, 145237, 145238, 145242, 145244, 145246, 145249, 145254, 145255, 145256, 145258, 145275, 145276, 10243, 9419, 9420, 9424, 9958, 145289, 73044, 73041, 474210, 9148, 9144, 9152, 10168, 10479, 9981, 9156, 9100, 9092, 9096, 10094, 9915, 9081, 10676, 9528, 9535, 10322, 9602, 9601, 9607, 10369, 9617, 9611, 9612, 145300, 145302, 145304, 16079, 16100, 16602, 16598, 16625, 17013, 17008, 17009, 16010, 16028, 16779, 16791, 16782, 16783, 12024, 558512, 17408, 17356, 17365, 17362, 17382, 17402, 17375, 17394, 891704, 8335, 8234, 8229, 7829, 506118, 144207, 8520, 143853, 8319, 8021, 145245, 11867, 12727, 117002, 117059, 9721, 10247, 145235, 145236, 145239, 145240, 199916, 10585, 9184, 9182, 9176, 9185, 9135, 9921, 9919, 9083, 10271, 10274, 73155, 10227, 10224, 10487, 9744, 10470, 10325, 10373, 9319, 9357, 9346, 9771, 199841, 199839, 199840, 10411, 10423, 145308, 145310, 9800, 13858, 16447, 14850, 9325, 145245, 10094};
    private static int[] butterflyArray = new int[]{81727, 62317, 127929, 130474, 472814, 340845, 339542, 68482, 319651, 180386, 320002, 143910, 67560, 67559, 148572, 312475, 312768, 207977, 68269, 54468, 49150, 312743, 213331, 148862, 126118, 58518, 209370, 148810, 81561, 83652, 54951, 312874, 312873, 49761, 312543, 58509, 58481, 148856, 48578, 132339, 132337, 194134, 551990, 51495, 69844, 59124, 322024, 343324, 62426, 59165, 214020, 119068, 61295, 70177, 146577, 55643, 257932, 70105, 1116165, 323769, 335001, 147328, 123628, 146575, 125494, 337771, 214375, 51536, 312600, 68264, 58587, 148793, 148537, 52075, 130326, 358871, 788309, 59128, 127928, 49972, 334616, 198798, 68275, 312663, 125577, 652769, 339996, 201918, 141752, 312525, 340019, 58564, 194027, 357982, 68273, 132997, 54068, 326007, 334347, 334985, 53843, 334385, 349135, 119664, 129363, 215703, 55010, 58543, 346970, 81967, 84239, 127303, 58550, 60896, 130300, 53866, 122281, 126589, 325871, 148831, 122375, 123903, 51567, 130661, 312613, 133417, 198832, 203124, 133443, 143076, 55640, 52484, 58556, 84662, 82792, 51791, 58606, 153470, 146665, 656738, 123912, 555760, 146696, 130775, 130774, 148800, 146728, 146736, 68278, 68242, 204685, 59170, 186842, 58575, 132330, 312542, 68240, 62978, 53893, 144223, 467067, 467057, 125815, 52589, 59185, 235341, 143294, 58532, 198800, 58531, 118786, 129415, 202451, 155512, 122382, 122381, 129126, 62439, 143140, 257475, 125555, 67835, 207981, 571353, 50065, 50068, 126299, 146923, 51743, 51748, 333775, 48662, 235550, 143383, 245891, 154590, 200938, 341450, 130451, 312544, 130348, 312599, 662546, 311421, 148554, 312559, 123708, 148690, 50073, 425004, 68249, 148830, 312668, 148883, 118914, 51784, 148746, 81559, 204839, 462014, 326454, 197100, 354352, 62381, 333774, 423956, 58478, 58474, 59188, 50071, 58473, 58475, 59187, 133434, 59189, 59120, 125551, 50075, 148562, 59159, 219779, 207956, 50892, 59182, 58578, 58521, 58514, 130767, 324444, 125591, 357657, 68244, 68268, 312764, 145641, 67324, 51614, 122374, 83086, 360368, 51586, 180789, 963490, 133444, 480251, 81729, 148818, 353670, 202106, 60834, 56776, 123815, 52771, 51581, 210213, 518098, 51576, 125936, 69824, 85449, 148742, 83227, 68418, 133154, 146572, 49766, 430566, 81744, 470431, 84115, 59190, 148517, 148516, 179384, 426251, 69940, 132134, 60752, 117381, 58468, 117374, 58495, 126162, 324771, 149448, 102800, 141751, 120893, 50340, 130462, 244226, 70174, 51578, 146927, 145639, 520456, 520457, 117360, 520398, 133692, 143259, 130391, 62749, 244230, 62766, 154515, 201910, 154058, 146669, 52069, 51654, 130776, 48505, 1040836, 1040809, 824773, 324447, 356078, 68423, 147389, 125570, 51785, 698315, 68465, 698316, 51566, 197079, 125589, 204775, 121993, 135257, 123629, 147298, 123817, 62500, 312353, 52067, 51538, 51534, 59152, 1068886, 125596, 142988, 59195, 198812, 132227, 179383, 145638, 141531, 223532, 130335, 58561, 58586, 60607, 60606, 58583, 58585, 236720, 153105, 50880, 52413, 155030, 68251, 343429, 59123, 117322, 104875, 58536, 117333, 142639, 59126, 59127, 54009, 62380, 58534, 117335, 55655, 117336, 197064, 479734, 154654, 147078, 59125, 55653, 126308, 50283, 58603, 182997, 130398, 105458, 474547, 148508, 148506, 51584, 132875, 57495, 207704, 133295, 68354, 132890, 148560, 119084, 132867, 312446, 148801, 326382, 182754, 81741, 68756, 196878, 133717, 1007813, 676794, 148563, 143664, 51773, 81734, 130339, 125563, 154363, 145634, 56832, 49920, 198813, 324088, 321054, 55785, 59194, 61781, 323071, 182764, 370815, 146661, 147931, 193874, 134226, 417805, 205140, 68352, 57463, 468756, 319069, 50072, 356048, 68469, 607639, 51583, 55521, 509480, 509493, 60551, 141617, 56529, 133442, 521511, 68263, 237647, 347039, 68232, 146651, 51588, 354661, 58523, 54900, 125576, 509650, 509627, 47226, 85026, 58525, 145586, 51097, 133927, 52592, 132123, 133450, 108799, 68239, 57485, 68279, 127490, 145621, 322520, 335092, 125543, 59153, 69942, 257761, 67653, 312321, 133416, 48550, 312697, 58479, 58576, 194542, 59176, 68274, 82069, 52925, 55401, 125593, 82481, 54087, 198821, 55626, 198801, 57484, 130785, 122383, 484122, 1081323, 1081332, 1081330, 58511, 1081329, 58513, 58505, 133631, 59192, 58506, 179855, 56225, 244441, 54064, 142948, 68262, 50391, 58579, 58580, 56644, 69863, 362078, 154576, 109983, 55641, 323095, 125646, 148737, 58519, 204096, 123810, 127103, 684794, 209718, 59119, 366195, 698623, 147928, 204814, 356143, 125579, 357130, 148795, 145642, 1038405, 986458, 1096580, 111447, 1038409, 1038410, 1038412, 83543, 122172, 144187, 208973, 62452, 62429, 204126, 124398, 148670, 198805, 209725, 58539, 54024, 81566, 199980, 230441, 58541, 59138, 208988, 59134, 198804, 318441, 347298, 358780, 689646, 126316, 50336, 245925, 148556, 312365, 58563, 63128, 54181, 59168, 47980, 81737, 68266, 144270, 68270, 132553, 50931, 194335, 154731, 245783, 148522, 622977, 126384, 337531, 146822, 520375, 58472, 58469, 362093, 58484, 128544, 197078, 143257, 358953, 347400, 244263, 146925, 154364, 51311, 312279, 132334, 67435, 50786, 49133, 62502, 48548, 330438, 82538, 411858, 125573, 194762, 197077, 48549, 58510, 69743, 143021, 52100, 320738, 146908, 129362, 117317, 121825, 333217, 245872, 319796, 323094, 125537, 198828};
    private static int[] metaArray = new int[]{3, 47224};

    private Module birdsModel;
    private Module biosphereModel;
    private Module butterflyModel;
    private Module metaModel;

    public ModelClass(Context context) {
        try {
            this.birdsModel = Module.load(fetchModelFile(context, "nabirds.pt"));
            this.biosphereModel = Module.load(fetchModelFile(context, "biosphere.pt"));
            this.butterflyModel = Module.load(fetchModelFile(context, "butterfly.pt"));
            this.metaModel = Module.load(fetchModelFile(context, "meta.pt"));
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }

    // example usage:  modelClass.runModel(imageBitMap, "NABirdsModel", 5);
    // possible values for modelName: "BiosphereModel", "ButterflyModel", "NABirdsModel", "MetaModel"
    public int[] runModel(Bitmap bitmap, String modelName, int numPredictions) {

        Module module = null;
        switch (modelName) {
            case "BiosphereModel":
                module = this.biosphereModel;
                break;
            case "NABirdsModel":
                module = this.birdsModel;
                break;
            case "ButterflyModel":
                module = this.butterflyModel;
                break;
            case "MetaModel":
                module = this.metaModel;
                break;
            default:
                System.out.println("INVALID MODEL NAME");
        }

        Tensor inputTensor = TensorImageUtils.bitmapToFloat32Tensor(bitmap,
                TensorImageUtils.TORCHVISION_NORM_MEAN_RGB, TensorImageUtils.TORCHVISION_NORM_STD_RGB);

        Tensor outputTensor = module.forward(IValue.from(inputTensor)).toTensor();
        float[] scores = outputTensor.getDataAsFloatArray();

        if (modelName.equals("MetaModel")) {
            int result = getTopNIndices(1, scores)[0];
            if (metaArray[result] == 3) {
                return runModel(bitmap, "NABirdsModel", numPredictions);
            }
            else if (metaArray[result] == 47224) {
                return runModel(bitmap, "ButterflyModel", numPredictions);
            }
            else {
                System.out.println("META MODEL ISSUE");
            }
        }

        int[] resultArray = getTopNIndices(numPredictions, scores);

        int[] finalArray = new int[numPredictions];
        for (int i = 0; i < resultArray.length; i++) {
            switch (modelName) {
                case "BiosphereModel":
                    finalArray[i] = biosphereArray[resultArray[i]];
                    break;
                case "NABirdsModel":
                    finalArray[i] = birdsArray[resultArray[i]];
                    break;
                case "ButterflyModel":
                    finalArray[i] = butterflyArray[resultArray[i]];
                    break;
            }
        }

        return finalArray;

    }

    // finds the indices of the n highest scores
    private static int[] getTopNIndices(int n, float[] scores) {
        int[] topIdxs = new int[n];

        for (int i = 0; i < n; i++) {
            int max_i = -1;
            float max_v = Float.NEGATIVE_INFINITY;
            for (int j = 0; j < scores.length; j++) {
                if (scores[j] > max_v) {
                    max_v = scores[j];
                    max_i = j;
                }
            }

            scores[max_i] = Float.NEGATIVE_INFINITY;
            topIdxs[i] = max_i;
        }

        return topIdxs;
    }

    // returns the path to the model file
    private static String fetchModelFile(Context context, String modelName) throws IOException {
        File file = new File(context.getFilesDir(), modelName);
        if (file.exists() && file.length() > 0) {
            return file.getAbsolutePath();
        }

        try (InputStream is = context.getAssets().open(modelName)) {
            try (OutputStream os = new FileOutputStream(file)) {
                byte[] buffer = new byte[4 * 1024];
                int read;
                while ((read = is.read(buffer)) != -1) {
                    os.write(buffer, 0, read);
                }
                os.flush();
            }
            return file.getAbsolutePath();
        }
    }
}
